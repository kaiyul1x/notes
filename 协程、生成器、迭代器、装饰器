协程(微线程)：   就像进程内有多个线程一样，线程内有多协成；更重要的是协程不被操作系统所管理，完全有程序去控制；

优点：
    无需线程上下文的切换开销；
    方便切换控制流，简化编程模型；
    高并发，高扩展性，低成本； 一个CPU可以支持上万个协程；
缺点：
    无法利用多核资源，协程本质是单线程，不能同事将单个CPU的多核利用。 需要配合进程运行在多CPU上；
    进行阻塞操作时，会阻塞整个程序；
    
    
生成器： 一边循环一边计算的机制，（generator）
优点：  节约内存； 迭代到下一次所调用是，所有使用的参数都是第一次所保留的；
注意： 生成器只能遍历一次。
如： 列表推导式中括号换为圆括号；  li =(i for i in range(5))
生成器函数： 使用yield语句返回结果；
next() 和 __next__（）方法是一样的
send()是向生成器导入参数并返回参数的，
使用send（）时必须，在yield前加一个变量并且打印（ret = yield b）;  使用之前必须使用一次 next() or  __next__


迭代器： 
      可以被next()函数不断调用，并不断返回下一个值的对象成为迭代器；  生成器是迭代器的子类；
      isinstace([], iterator)

闭包：
      内部函数对外部函数作用域变量的引用（非全局变量）； 闭包可以记住外部函数的参数；
 条件： 1，内嵌函数； 2 变量的引用； 3.返回内部函数
 
 
 装饰器：
        其实就是一个闭包，把一个函数当做参数然后返回一个替代版函数；
 特性：
      可以把装饰的函数替换成其他函数； 可以在加载模块的时候立即执行；
 功能： 
      1，引入日志； 2，函数执行时间统计；3，执行函数前预备处理； 4.权限校验等场景； 5.缓存；
