celrty: 
  application(task producer) 生产者
  beat: 任务调度器，beat进程会读取配置文件的内容，周期性的将配置中到期需执行的任务发送给任务队列
  broker (task queue) 任务队列， （redis, kafuka,MQ），消息中间件，接受任务生产者发送过来的任务消息
  worker (task consumer) 可以是普通的worker, 执行任务的消费者，通常会在多台服务器运行的消费者，提高运行效率
    
  启动一个worker：  celery -A celery_app worker -l info
  启动一个beat,随时检查配置变化：  celery -A celery_app beat -l info
  
  处理大量消息的分布式系统，异步任务队列
  celery架构分三部分组成： 消息中间件，任务执行单元，任务执行结果存储

-- celeryconfig.py  
from kombu.common import Broadcast
from kombu import Exchange, Queue

broker = 'amqp://guest:guest@localhost:5672//',
result_backend = 'redis://127.0.0.1:6379/15'
accept_content = 'json',
enable_utc = 'false',

task_queues = (
    Broadcast("broadcast"),
    Queue('celery', Exchange('celery', type='direct'), routing_key='celery')
)


task_routes = {
    'cpu_utilization_rate': {
        'queue': 'broadcast',
        'exchange': 'broadcast'
    }
}
beat_schedule = {
    'cpu_utilization_rate': {
        'task': 'cpu_utilization_rate',
        'schedule': 3.0,
        'options': {'exchange': 'broadcast', }
    }
}
--main.py: 
  app = Celery('tasks')
  app.config_from_object('celery_tasks.celeryconfig')
  app.autodiscover_tasks(['celery_tasks.execution_process', ])
  
